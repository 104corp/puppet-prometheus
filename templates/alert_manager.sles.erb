#!/bin/bash
#
#       /etc/rc.d/init.d/alert_manager
#
#       Daemonize the prometheus alert manager.
#
### BEGIN INIT INFO
# Provides:          alert_manager
# Required-Start:    network
# Should-Start:      $null
# Required-Stop:     $null
# Should-Stop:	     $null
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: The Alertmanager handles alerts sent by client applications such as the Prometheus server.
# Description:       The Alertmanager handles alerts sent by client applications such as the Prometheus server.It takes care of deduplicating, grouping, and routing them to the correct receiver integration such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.
### END INIT INFO

. /etc/rc.status

rc_reset

ALERT_MANAGER_BIN=<%= scope.lookupvar('prometheus::alert_manager::bin_dir') %>/alert_manager
LOG_FILE=/var/log/alert_manager


# read settings like GOMAXPROCS from "/etc/sysconfig/prometheus"
[ -e /etc/sysconfig/alert_manager ] && . /etc/sysconfig/alert_manager

export GOMAXPROCS=${GOMAXPROCS:-2}


case "$1" in
    start)
        echo -n "Starting Prometheus alert manager"
        ## Start daemon with startproc(8). If this fails
        ## the return value is set appropriately by startproc.
        startproc $ALERT_MANAGER_BIN -config.file=<%= scope.lookupvar('prometheus::alert_manager::config_file') %> -storage.path=<%= scope.lookupvar('prometheus::alert_manager::storage_path') %> <%= scope.lookupvar('prometheus::alert_manager::extra_options') %> >> "$LOG_FILE"

        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Shutting down prometheus "
        ## Stop daemon with killproc(8) and if this fails
        ## killproc sets the return value according to LSB.

        killproc -TERM $ALERT_MANAGER_BIN

        # Remember status and be verbose
        rc_status -v
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    reload)
        # If it supports signaling:
        echo -n "Reload service prometheus "
        killproc -HUP $ALERT_MANAGER_BIN
        #touch /var/run/prometheus.pid
        rc_status -v

        ## Otherwise if it does not support reload:
        #rc_failed 3
        #rc_status -v
        ;;
    status)
        echo -n "Checking for service prometheus "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Return value is slightly different for the status command:
        # 0 - service up and running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running (unused)
        # 4 - service status unknown :-(
        # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

        # NOTE: checkproc returns LSB compliant status values.
        checkproc $ALERT_MANAGER_BIN
        # NOTE: rc_status knows that we called this init script with
        # "status" option and adapts its messages accordingly.
        rc_status -v
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $0 {start|stop|status|restart|reload}"
        exit 1
        ;;
esac

rc_exit
